## test for lowest and highest positions
if(min_digit_idx < min_word_idx){
first_digit = stringr::str_sub(str, start = min_digit_idx, end=min_digit_idx)
}
else{
first_digit = unname(named_digits[word_digits[1]])
}
if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(unlist(word_digits), 1)])
}
return(as.numeric(paste0(first_digit, last_digit)))
}
lapply(day1[1:10], get_all_digits)
get_all_digits = function(str){
## Helper named vector
named_digits = c("one"=1, "two"=2,
"three"=3, "four"=4,
"five"=5, "six"=6,
"seven"=7, "eight"=8,
"nine"=9)
## Find all the digits in the word
digit_locs = stringr::str_locate_all(str, "[:digit:]")
min_digit_idx = min(unlist(digit_locs))
max_digit_idx = max(unlist(digit_locs))
## Find all the word digits
word_pattern = "one|two|three|four|five|six|seven|eight|nine"
word_digit_locs = unlist(stringr::str_locate_all(str, word_pattern))
word_digits = unlist(stringr::str_extract_all(str, word_pattern))
min_word_idx = min(unlist(word_digit_locs))
max_word_idx = max(unlist(word_digit_locs))
## test for lowest and highest positions
if(min_digit_idx < min_word_idx){
first_digit = stringr::str_sub(str, start = min_digit_idx, end=min_digit_idx)
}
else{
first_digit = unname(named_digits[word_digits[1]])
}
if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(word_digits), 1)])
get_all_digits = function(str){
## Helper named vector
named_digits = c("one"=1, "two"=2,
"three"=3, "four"=4,
"five"=5, "six"=6,
"seven"=7, "eight"=8,
"nine"=9)
## Find all the digits in the word
digit_locs = stringr::str_locate_all(str, "[:digit:]")
min_digit_idx = min(unlist(digit_locs))
max_digit_idx = max(unlist(digit_locs))
## Find all the word digits
word_pattern = "one|two|three|four|five|six|seven|eight|nine"
word_digit_locs = unlist(stringr::str_locate_all(str, word_pattern))
word_digits = unlist(stringr::str_extract_all(str, word_pattern))
min_word_idx = min(unlist(word_digit_locs))
max_word_idx = max(unlist(word_digit_locs))
## test for lowest and highest positions
if(min_digit_idx < min_word_idx){
first_digit = stringr::str_sub(str, start = min_digit_idx, end=min_digit_idx)
}
else{
first_digit = unname(named_digits[word_digits[1]])
}
if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(word_digits, 1)])
}
return(as.numeric(paste0(first_digit, last_digit)))
}
lapply(day1[1:10], get_all_digits)
out2 = Reduce("+",lapply(day1, get_all_digits))
print(out2)
get_all_digits = function(str){
## Helper named vector
named_digits = c("zero"=0 "one"=1, "two"=2,
get_all_digits = function(str){
## Helper named vector
named_digits = c("zero"=0, "one"=1, "two"=2,
"three"=3, "four"=4,
"five"=5, "six"=6,
"seven"=7, "eight"=8,
"nine"=9)
## Find all the digits in the word
digit_locs = stringr::str_locate_all(str, "[:digit:]")
min_digit_idx = min(unlist(digit_locs))
max_digit_idx = max(unlist(digit_locs))
## Find all the word digits
word_pattern = "one|two|three|four|five|six|seven|eight|nine"
word_digit_locs = unlist(stringr::str_locate_all(str, word_pattern))
word_digits = unlist(stringr::str_extract_all(str, word_pattern))
min_word_idx = min(unlist(word_digit_locs))
max_word_idx = max(unlist(word_digit_locs))
## test for lowest and highest positions
if(min_digit_idx < min_word_idx){
first_digit = stringr::str_sub(str, start = min_digit_idx, end=min_digit_idx)
}
else{
first_digit = unname(named_digits[word_digits[1]])
}
if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(word_digits, 1)])
}
return(as.numeric(paste0(first_digit, last_digit)))
}
out2 = Reduce("+",lapply(day1, get_all_digits))
print(out2)
View(x)
x
compare = lapply(day1, get_all_digits)
compare
out2 = Reduce("+",lapply(day1, get_all_digits))
print(out2)
str = str |>
stringr::str_replace_all(_, "one", "one1one")|>
stringr::str_replace_all(_, "one", "one1one") |>
stringr::str_replace_all(_, "one", "one1one") |>
stringr::str_replace_all(_, "one", "one1one") |>
## Find all the digits in the word
digit_locs = stringr::str_locate_all(str, "[:digit:]")
get_all_digits = function(str){
## Helper named vector
named_digits = c("zero"=0, "one"=1, "two"=2,
"three"=3, "four"=4,
"five"=5, "six"=6,
"seven"=7, "eight"=8,
"nine"=9)
str = str |>
stringr::str_replace_all(_, "one", "one1one")|>
stringr::str_replace_all(_, "two", "two2two") |>
stringr::str_replace_all(_, "three", "three3three") |>
stringr::str_replace_all(_, "four", "four4four") |>
stringr::str_replace_all(_, "five", "five5five") |>
stringr::str_replace_all(_, "six", "six6six") |>
stringr::str_replace_all(_, "seven", "seven7seven") |>
stringr::str_replace_all(_, "eight", "eight8eight") |>
stringr::str_replace_all(_, "nine", "nine9nine") |>
## Find all the digits in the word
digit_locs = stringr::str_locate_all(str, "[:digit:]")
stringr::str_replace_all(_, "one", "one1one") |>min_digit_idx = min(unlist(digit_locs))
max_digit_idx = max(unlist(digit_locs))
## Find all the word digits
word_pattern = "one|two|three|four|five|six|seven|eight|nine"
word_digit_locs = unlist(stringr::str_locate_all(str, word_pattern))
word_digits = unlist(stringr::str_extract_all(str, word_pattern))
min_word_idx = min(unlist(word_digit_locs))
max_word_idx = max(unlist(word_digit_locs))
## test for lowest and highest positions
if(min_digit_idx < min_word_idx){
first_digit = stringr::str_sub(str, start = min_digit_idx, end=min_digit_idx)
}
else{
first_digit = unname(named_digits[word_digits[1]])
}
if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(word_digits, 1)])
}
return(as.numeric(paste0(first_digit, last_digit)))
}
get_all_digits = function(str){
## Helper named vector
named_digits = c("zero"=0, "one"=1, "two"=2,
"three"=3, "four"=4,
"five"=5, "six"=6,
"seven"=7, "eight"=8,
"nine"=9)
str = str |>
stringr::str_replace_all("one", "one1one")|>
stringr::str_replace_all("two", "two2two") |>
stringr::str_replace_all("three", "three3three") |>
stringr::str_replace_all("four", "four4four") |>
stringr::str_replace_all("five", "five5five") |>
stringr::str_replace_all("six", "six6six") |>
stringr::str_replace_all("seven", "seven7seven") |>
stringr::str_replace_all("eight", "eight8eight") |>
stringr::str_replace_all("nine", "nine9nine") |>
## Find all the digits in the word
digit_locs = stringr::str_locate_all(str, "[:digit:]")
stringr::str_replace_all(_, "one", "one1one") |>min_digit_idx = min(unlist(digit_locs))
max_digit_idx = max(unlist(digit_locs))
## Find all the word digits
word_pattern = "one|two|three|four|five|six|seven|eight|nine"
word_digit_locs = unlist(stringr::str_locate_all(str, word_pattern))
word_digits = unlist(stringr::str_extract_all(str, word_pattern))
min_word_idx = min(unlist(word_digit_locs))
max_word_idx = max(unlist(word_digit_locs))
## test for lowest and highest positions
if(min_digit_idx < min_word_idx){
first_digit = stringr::str_sub(str, start = min_digit_idx, end=min_digit_idx)
}
else{
first_digit = unname(named_digits[word_digits[1]])
}
if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(word_digits, 1)])
}
return(as.numeric(paste0(first_digit, last_digit)))
}
get_all_digits = function(str){
## Helper named vector
named_digits = c("zero"=0, "one"=1, "two"=2,
"three"=3, "four"=4,
"five"=5, "six"=6,
"seven"=7, "eight"=8,
"nine"=9)
str = str |>
stringr::str_replace_all(string = _, "one", "one1one")|>
stringr::str_replace_all(string = _,"two", "two2two") |>
stringr::str_replace_all(string = _,"three", "three3three") |>
stringr::str_replace_all(string = _,"four", "four4four") |>
stringr::str_replace_all(string = _,"five", "five5five") |>
stringr::str_replace_all(string = _,"six", "six6six") |>
stringr::str_replace_all(string = _,"seven", "seven7seven") |>
stringr::str_replace_all(string = _,"eight", "eight8eight") |>
stringr::str_replace_all(string = _,"nine", "nine9nine") |>
## Find all the digits in the word
digit_locs = stringr::str_locate_all(str, "[:digit:]")
stringr::str_replace_all(_, "one", "one1one") |>min_digit_idx = min(unlist(digit_locs))
max_digit_idx = max(unlist(digit_locs))
## Find all the word digits
word_pattern = "one|two|three|four|five|six|seven|eight|nine"
word_digit_locs = unlist(stringr::str_locate_all(str, word_pattern))
word_digits = unlist(stringr::str_extract_all(str, word_pattern))
min_word_idx = min(unlist(word_digit_locs))
max_word_idx = max(unlist(word_digit_locs))
## test for lowest and highest positions
if(min_digit_idx < min_word_idx){
first_digit = stringr::str_sub(str, start = min_digit_idx, end=min_digit_idx)
}
else{
first_digit = unname(named_digits[word_digits[1]])
}
if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(word_digits, 1)])
}
return(as.numeric(paste0(first_digit, last_digit)))
}
get_all_digits = function(str){
## Helper named vector
named_digits = c("zero"=0, "one"=1, "two"=2,
"three"=3, "four"=4,
"five"=5, "six"=6,
"seven"=7, "eight"=8,
"nine"=9)
str = stringr::str_replace_all(string = _, "one", "one1one")
str = stringr::str_replace_all(string = _,"two", "two2two")
str = stringr::str_replace_all(string = _,"three", "three3three")
str = stringr::str_replace_all(string = _,"four", "four4four")
str = stringr::str_replace_all(string = _,"five", "five5five")
str = stringr::str_replace_all(string = _,"six", "six6six")
str = stringr::str_replace_all(string = _,"seven", "seven7seven")
str = stringr::str_replace_all(string = _,"eight", "eight8eight")
str = stringr::str_replace_all(string = _,"nine", "nine9nine")
## Find all the digits in the word
digit_locs = stringr::str_locate_all(str, "[:digit:]")
stringr::str_replace_all(_, "one", "one1one") |>min_digit_idx = min(unlist(digit_locs))
max_digit_idx = max(unlist(digit_locs))
## Find all the word digits
word_pattern = "one|two|three|four|five|six|seven|eight|nine"
word_digit_locs = unlist(stringr::str_locate_all(str, word_pattern))
word_digits = unlist(stringr::str_extract_all(str, word_pattern))
min_word_idx = min(unlist(word_digit_locs))
max_word_idx = max(unlist(word_digit_locs))
## test for lowest and highest positions
if(min_digit_idx < min_word_idx){
first_digit = stringr::str_sub(str, start = min_digit_idx, end=min_digit_idx)
}
else{
first_digit = unname(named_digits[word_digits[1]])
}
if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(word_digits, 1)])
}
return(as.numeric(paste0(first_digit, last_digit)))
}
get_all_digits = function(str){
## Helper named vector
named_digits = c("zero"=0, "one"=1, "two"=2,
"three"=3, "four"=4,
"five"=5, "six"=6,
"seven"=7, "eight"=8,
"nine"=9)
str = stringr::str_replace_all(string = _, "one", "one1one")
str = stringr::str_replace_all(string = _,"two", "two2two")
str = stringr::str_replace_all(string = _,"three", "three3three")
str = stringr::str_replace_all(string = _,"four", "four4four")
str = stringr::str_replace_all(string = _,"five", "five5five")
str = stringr::str_replace_all(string = _,"six", "six6six")
str = stringr::str_replace_all(string = _,"seven", "seven7seven")
str = stringr::str_replace_all(string = _,"eight", "eight8eight")
str = stringr::str_replace_all(string = _,"nine", "nine9nine")
## Find all the digits in the word
digit_locs = stringr::str_locate_all(str, "[:digit:]")
min_digit_idx = min(unlist(digit_locs))
max_digit_idx = max(unlist(digit_locs))
## Find all the word digits
word_pattern = "one|two|three|four|five|six|seven|eight|nine"
word_digit_locs = unlist(stringr::str_locate_all(str, word_pattern))
word_digits = unlist(stringr::str_extract_all(str, word_pattern))
min_word_idx = min(unlist(word_digit_locs))
max_word_idx = max(unlist(word_digit_locs))
## test for lowest and highest positions
if(min_digit_idx < min_word_idx){
first_digit = stringr::str_sub(str, start = min_digit_idx, end=min_digit_idx)
}
else{
first_digit = unname(named_digits[word_digits[1]])
}
if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(word_digits, 1)])
}
return(as.numeric(paste0(first_digit, last_digit)))
}
get_all_digits = function(str){
## Helper named vector
named_digits = c("zero"=0, "one"=1, "two"=2,
"three"=3, "four"=4,
"five"=5, "six"=6,
"seven"=7, "eight"=8,
"nine"=9)
str = stringr::str_replace_all(string = str, "one", "one1one")
str = stringr::str_replace_all(string = str,"two", "two2two")
str = stringr::str_replace_all(string = str,"three", "three3three")
str = stringr::str_replace_all(string = str,"four", "four4four")
str = stringr::str_replace_all(string = str,"five", "five5five")
str = stringr::str_replace_all(string = str,"six", "six6six")
str = stringr::str_replace_all(string = str,"seven", "seven7seven")
str = stringr::str_replace_all(string = str,"eight", "eight8eight")
str = stringr::str_replace_all(string = str,"nine", "nine9nine")
## Find all the digits in the word
digit_locs = stringr::str_locate_all(str, "[:digit:]")
min_digit_idx = min(unlist(digit_locs))
max_digit_idx = max(unlist(digit_locs))
## Find all the word digits
word_pattern = "one|two|three|four|five|six|seven|eight|nine"
word_digit_locs = unlist(stringr::str_locate_all(str, word_pattern))
word_digits = unlist(stringr::str_extract_all(str, word_pattern))
min_word_idx = min(unlist(word_digit_locs))
max_word_idx = max(unlist(word_digit_locs))
## test for lowest and highest positions
if(min_digit_idx < min_word_idx){
first_digit = stringr::str_sub(str, start = min_digit_idx, end=min_digit_idx)
}
else{
first_digit = unname(named_digits[word_digits[1]])
}
if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(word_digits, 1)])
}
return(as.numeric(paste0(first_digit, last_digit)))
}
out2 = Reduce("+",lapply(day1, get_all_digits))
print(out2)
library(stringr)
str_extract_all(x, pattern = "two2two")
str_extract_all(x, pattern = "two2two", simplify = T)
str_extract_all(x, pattern = "one1one", simplify = T)
x
part2 = function(str){
part2 = function(str){
}
}
part2 = function(str){
str = str |>
stringr::str_replace_all(string = _, "one", "one1one") |>
stringr::str_replace_all(string = _,"two", "two2two")|>
stringr::str_replace_all(string = _,"three", "three3three"|>
stringr::str_replace_all(string = _,"four", "four4four") |>
stringr::str_replace_all(string = _,"five", "five5five") |>
stringr::str_replace_all(string = _,"six", "six6six") |>
stringr::str_replace_all(string = _,"seven", "seven7seven")|>
stringr::str_replace_all(string = _,"eight", "eight8eight")|>
stringr::str_replace_all(string = _,"nine", "nine9nine")
}
str = str |>
stringr::str_replace_all(string = _, "one", "one1one") |>
stringr::str_replace_all(string = _,"two", "two2two")|>
stringr::str_replace_all(string = _,"three", "three3three"|>
stringr::str_replace_all(string = _,"four", "four4four") |>
stringr::str_replace_all(string = _,"five", "five5five") |>
stringr::str_replace_all(string = _,"six", "six6six") |>
stringr::str_replace_all(string = _,"seven", "seven7seven")|>
stringr::str_replace_all(string = _,"eight", "eight8eight")|>
stringr::str_replace_all(string = _,"nine", "nine9nine")
)
part2 = function(str){
## Helper named vector
named_digits = c("zero"=0, "one"=1, "two"=2,
"three"=3, "four"=4,
"five"=5, "six"=6,
"seven"=7, "eight"=8,
"nine"=9)
str = str |>
stringr::str_replace_all(string = _, "one", "one1one") |>
stringr::str_replace_all(string = _,"two", "two2two")|>
stringr::str_replace_all(string = _,"three", "three3three")|>
stringr::str_replace_all(string = _,"four", "four4four") |>
stringr::str_replace_all(string = _,"five", "five5five") |>
stringr::str_replace_all(string = _,"six", "six6six") |>
stringr::str_replace_all(string = _,"seven", "seven7seven")|>
stringr::str_replace_all(string = _,"eight", "eight8eight")|>
stringr::str_replace_all(string = _,"nine", "nine9nine")
## Find all the digits in the word
digit_locs = stringr::str_locate_all(str, "[:digit:]")
min_digit_idx = min(unlist(digit_locs))
max_digit_idx = max(unlist(digit_locs))
## Find all the word digits
word_pattern = "one|two|three|four|five|six|seven|eight|nine"
word_digit_locs = unlist(stringr::str_locate_all(str, word_pattern))
word_digits = unlist(stringr::str_extract_all(str, word_pattern))
min_word_idx = min(unlist(word_digit_locs))
max_word_idx = max(unlist(word_digit_locs))
## test for lowest and highest positions
if(min_digit_idx < min_word_idx){
first_digit = stringr::str_sub(str, start = min_digit_idx, end=min_digit_idx)
}
else{
first_digit = unname(named_digits[word_digits[1]])
}
if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(word_digits, 1)])
}
return(as.numeric(paste0(first_digit, last_digit)))
}
out2 = Reduce("+",lapply(day1, part2))
print(out2)
warnings()
install.packages(c("arrow", "bslib", "cluster", "crosstalk", "dqrng", "duckdb", "fixest", "foreign", "fstcore", "geos", "GGally", "ggdist", "gtools", "haven", "htmlwidgets", "insight", "libgeos", "Matrix", "mvtnorm", "nleqslv", "nlme", "OpenMx", "qs", "QuickJSR", "scales", "stringdist", "stringfish", "stringi", "tinytex", "topicmodels", "units", "wk"))
install.packages(c("arrow", "bslib", "cluster", "dqrng", "duckdb", "foreign", "fstcore", "geos", "haven", "libgeos", "Matrix", "mvtnorm", "nlme", "OpenMx", "qs", "scales", "stringdist", "stringfish", "topicmodels", "units", "wk"))
setwd("~/Documents/github/aoc2023/code/")
day3 = readLines("../data/day3.txt")
day3 = readLines("../data/day3.txt")
tokens = strsplit(day3, sep="")
tokens = strsplit(day3, split ="")
token_len = length(tokens)
result = matrix(NA, nrow = length(day3), ncol=max(token_len))
for(i in seq_along(day3)){
result[i, seq_len(token_len[i])] = type(tokens[[i]])
}
day3 = readLines("../data/day3.txt")
tokens = strsplit(day3, split ="")
token_len = length(tokens)
result = matrix(NA, nrow = length(day3), ncol=max(token_len))
for(i in seq_along(day3)){
result[i, seq_len(token_len[i])] = identity(tokens[[i]])
}
token_len = lengths(tokens)
result = matrix(NA, nrow = length(day3), ncol=max(token_len))
for(i in seq_along(day3)){
result[i, seq_len(token_len[i])] = identity(tokens[[i]])
}
?lengths
partnumber = matrix(F, nrow = nrow(results), ncol = ncol(results))
partnumber = matrix(F, nrow = nrow(result), ncol = ncol(result))
invalid_chars = c(numbers, ".")
numbers =as.character(0:9)
invalid_chars = c(numbers, ".")
around = function(x,y, x_max = nrow(result), y_max = ncol(result)){
xs = x + c(-1,0,1)
ys = y + c(-1,0,1)
xs = xs[xs > 0]
ys = ys[ys > 0]
xs = xs[xs <= x_max]
ys = ys[ys <= y_max]
result[xs, ys]
}
for(i in seq_len(nrow(result))){
for(j in seq_len(ncol(result))){
partnumber[i,j] = ifelse{
for(j in seq_len(ncol(result))){
partnumber[i,j] = ifelse{
for(i in seq_len(nrow(result))){
for(j in seq_len(ncol(result))){
partnumber[i,j] = ifelse(
result[i,j] %in% numbers,
any(!around(i,j) %in% invalid_chars),
FALSE
)
}
}
result
