if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(word_digits, 1)])
}
return(as.numeric(paste0(first_digit, last_digit)))
}
get_all_digits = function(str){
## Helper named vector
named_digits = c("zero"=0, "one"=1, "two"=2,
"three"=3, "four"=4,
"five"=5, "six"=6,
"seven"=7, "eight"=8,
"nine"=9)
str = stringr::str_replace_all(string = str, "one", "one1one")
str = stringr::str_replace_all(string = str,"two", "two2two")
str = stringr::str_replace_all(string = str,"three", "three3three")
str = stringr::str_replace_all(string = str,"four", "four4four")
str = stringr::str_replace_all(string = str,"five", "five5five")
str = stringr::str_replace_all(string = str,"six", "six6six")
str = stringr::str_replace_all(string = str,"seven", "seven7seven")
str = stringr::str_replace_all(string = str,"eight", "eight8eight")
str = stringr::str_replace_all(string = str,"nine", "nine9nine")
## Find all the digits in the word
digit_locs = stringr::str_locate_all(str, "[:digit:]")
min_digit_idx = min(unlist(digit_locs))
max_digit_idx = max(unlist(digit_locs))
## Find all the word digits
word_pattern = "one|two|three|four|five|six|seven|eight|nine"
word_digit_locs = unlist(stringr::str_locate_all(str, word_pattern))
word_digits = unlist(stringr::str_extract_all(str, word_pattern))
min_word_idx = min(unlist(word_digit_locs))
max_word_idx = max(unlist(word_digit_locs))
## test for lowest and highest positions
if(min_digit_idx < min_word_idx){
first_digit = stringr::str_sub(str, start = min_digit_idx, end=min_digit_idx)
}
else{
first_digit = unname(named_digits[word_digits[1]])
}
if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(word_digits, 1)])
}
return(as.numeric(paste0(first_digit, last_digit)))
}
out2 = Reduce("+",lapply(day1, get_all_digits))
print(out2)
library(stringr)
str_extract_all(x, pattern = "two2two")
str_extract_all(x, pattern = "two2two", simplify = T)
str_extract_all(x, pattern = "one1one", simplify = T)
x
part2 = function(str){
part2 = function(str){
}
}
part2 = function(str){
str = str |>
stringr::str_replace_all(string = _, "one", "one1one") |>
stringr::str_replace_all(string = _,"two", "two2two")|>
stringr::str_replace_all(string = _,"three", "three3three"|>
stringr::str_replace_all(string = _,"four", "four4four") |>
stringr::str_replace_all(string = _,"five", "five5five") |>
stringr::str_replace_all(string = _,"six", "six6six") |>
stringr::str_replace_all(string = _,"seven", "seven7seven")|>
stringr::str_replace_all(string = _,"eight", "eight8eight")|>
stringr::str_replace_all(string = _,"nine", "nine9nine")
}
str = str |>
stringr::str_replace_all(string = _, "one", "one1one") |>
stringr::str_replace_all(string = _,"two", "two2two")|>
stringr::str_replace_all(string = _,"three", "three3three"|>
stringr::str_replace_all(string = _,"four", "four4four") |>
stringr::str_replace_all(string = _,"five", "five5five") |>
stringr::str_replace_all(string = _,"six", "six6six") |>
stringr::str_replace_all(string = _,"seven", "seven7seven")|>
stringr::str_replace_all(string = _,"eight", "eight8eight")|>
stringr::str_replace_all(string = _,"nine", "nine9nine")
)
part2 = function(str){
## Helper named vector
named_digits = c("zero"=0, "one"=1, "two"=2,
"three"=3, "four"=4,
"five"=5, "six"=6,
"seven"=7, "eight"=8,
"nine"=9)
str = str |>
stringr::str_replace_all(string = _, "one", "one1one") |>
stringr::str_replace_all(string = _,"two", "two2two")|>
stringr::str_replace_all(string = _,"three", "three3three")|>
stringr::str_replace_all(string = _,"four", "four4four") |>
stringr::str_replace_all(string = _,"five", "five5five") |>
stringr::str_replace_all(string = _,"six", "six6six") |>
stringr::str_replace_all(string = _,"seven", "seven7seven")|>
stringr::str_replace_all(string = _,"eight", "eight8eight")|>
stringr::str_replace_all(string = _,"nine", "nine9nine")
## Find all the digits in the word
digit_locs = stringr::str_locate_all(str, "[:digit:]")
min_digit_idx = min(unlist(digit_locs))
max_digit_idx = max(unlist(digit_locs))
## Find all the word digits
word_pattern = "one|two|three|four|five|six|seven|eight|nine"
word_digit_locs = unlist(stringr::str_locate_all(str, word_pattern))
word_digits = unlist(stringr::str_extract_all(str, word_pattern))
min_word_idx = min(unlist(word_digit_locs))
max_word_idx = max(unlist(word_digit_locs))
## test for lowest and highest positions
if(min_digit_idx < min_word_idx){
first_digit = stringr::str_sub(str, start = min_digit_idx, end=min_digit_idx)
}
else{
first_digit = unname(named_digits[word_digits[1]])
}
if(max_digit_idx > max_word_idx){
last_digit = stringr::str_sub(str, start= max_digit_idx, end=max_digit_idx)
}
else{
last_digit = unname(named_digits[tail(word_digits, 1)])
}
return(as.numeric(paste0(first_digit, last_digit)))
}
out2 = Reduce("+",lapply(day1, part2))
print(out2)
warnings()
install.packages(c("arrow", "bslib", "cluster", "crosstalk", "dqrng", "duckdb", "fixest", "foreign", "fstcore", "geos", "GGally", "ggdist", "gtools", "haven", "htmlwidgets", "insight", "libgeos", "Matrix", "mvtnorm", "nleqslv", "nlme", "OpenMx", "qs", "QuickJSR", "scales", "stringdist", "stringfish", "stringi", "tinytex", "topicmodels", "units", "wk"))
install.packages(c("arrow", "bslib", "cluster", "dqrng", "duckdb", "foreign", "fstcore", "geos", "haven", "libgeos", "Matrix", "mvtnorm", "nlme", "OpenMx", "qs", "scales", "stringdist", "stringfish", "topicmodels", "units", "wk"))
setwd("Documents/github/aoc2023/code/")
day3 = tibble::as.tibble(readLines("../data/day3.txt"))
day3 = tibble::as_tibble(readLines("../data/day3.txt"))
View(day3)
day3 = readLines("../data/day3.txt")
day3
unique(day3)
## find all unique chars
for(i in 1:length(day3)){
unique(day3[i])
}
## find all unique chars
for(i in 1:length(day3)){
print(unique(day3[i]))
}
## find all unique chars
for(i in 1:length(day3)){
print(unique(strsplit(day3[i]), .))
}
## find all unique chars
for(i in 1:length(day3)){
print(unique(strsplit(day3[i], split = ".")))
}
## find all unique chars
for(i in 1:length(day3)){
print(unique(strsplit(day3[i], split = "\.")))
## find all unique chars
for(i in 1:length(day3)){
print(unique(strsplit(day3[i], split = "\\.")))
}
## find all unique chars
unique_chars = unique(unlist(strsplit(day3[i], split = "\\."))))
## find all unique chars
unique_chars = unique(unlist(strsplit(day3[i], split = "\\.")))
unique_chars
## find all unique chars
unique_chars = unique(unlist(strsplit(day3, split = "\\.")))
unique_chars
## find all unique chars
unique_chars = stringr::str_extract_all(unique(unlist(strsplit(day3, split = "\\."))), pattern = "[^0-9]")
unique_chars
## find all unique chars
unique_chars = unlist(stringr::str_extract_all(unique(unlist(strsplit(day3, split = "\\."))), pattern = "[^0-9]"))
unique_chars
## find all unique chars
unique_chars = unique(unlist(stringr::str_extract_all(unique(unlist(strsplit(day3, split = "\\."))), pattern = "[^0-9]")))
unique_chars
library(stringr)
## This gives @, &, *, $, -, #, =, %, + /
strsplit(day3, split = "\\.")
## This gives @, &, *, $, -, #, =, %, + /
unlist(strsplit(day3, split = "\\."))
## This gives @, &, *, $, -, #, =, %, + /
as.matrix(unlist(strsplit(day3, split = "\\.")))
## This gives @, &, *, $, -, #, =, %, + /
View(as.matrix(unlist(strsplit(day3, split = "\\."))))
## This gives @, &, *, $, -, #, =, %, + /
unlist(strsplit(day3, split = "\\."))
for(i in 1:length(day3)){
print(length(day3[i]))
}
for(i in 1:length(day3)){
print(nchar(day3[i]))
}
day3[i]
b = day3[i]
nchar(b)
## This gives @, &, *, $, -, #, =, %, + /
as.matrix(unlist(strsplit(day3, split = "\\.")), ncol = 140)
## This gives @, &, *, $, -, #, =, %, + /
View(as.matrix(unlist(strsplit(day3, split = "\\.")), ncol = 140))
## This gives @, &, *, $, -, #, =, %, + /
View(matrix(unlist(strsplit(day3, split = "\\.")), ncol = 140))
## This gives @, &, *, $, -, #, =, %, + /
j = matrix(unlist(strsplit(day3, split = "\\.")), ncol = 140))
## This gives @, &, *, $, -, #, =, %, + /
j = matrix(unlist(strsplit(day3, split = "\\.")), ncol = 140)
j[1][1]
15400/140
j = matrix(NA, nrow = 110, ncol = 140)
for(k in 1:140){print(i)}
for(k in 1:140){print(k)}
test = day3[1]
test
day3[1][1]
str_split_1(test)
str_split_1(test, pattern="\\.")
str_split(test)
str_split_fixed(test, pattern = "\\.")
str_split_fixed(test, pattern = "\\.", n = 140)
for(i in 1:length(day3)){
j[i] = str_split_fixed(string = day3[i], pattern = "\\.", n = 140)
}
warnings()
j
for(i in 1:length(day3)){
j[i,] = str_split_fixed(string = day3[i], pattern = "\\.", n = 140)
}
j = matrix(NA, nrow = 110, ncol = 140)
for(i in 1:length(day3)){
j[i,] = str_split_fixed(string = day3[i], pattern = "\\.", n = 140)
}
?str_split_fixed
j[i,] = 5
j[1, ] = 5
j
j = matrix(NA, nrow = 110, ncol = 140)
for(i in 1:length(day3)){
j[i,] = str_split(string = day3[i], pattern = "\\.")
}
str_split(string = day3[1], pattern = "\\.")
for(i in 1:length(day3)){
j[i,] = unlist(str_split(string = day3[i], pattern = "\\."))
}
unlist(str_split(string = day3[1], pattern = "\\."))
str_split(string = day3[1], pattern = "")
length(str_split(string = day3[1], pattern = ""))
length(unlist(str_split(string = day3[1], pattern = "")))
for(i in 1:length(day3)){
j[i,] = unlist(str_split(string = day3[i], pattern = ""))
}
j = matrix(NA, nrow = 110, ncol = 140)
length(day3)
j = matrix(NA, nrow = 140, ncol = 140)
for(i in 1:length(day3)){
j[i,] = unlist(str_split(string = day3[i], pattern = ""))
}
View(j)
for(i in 1:length(day3)){
j[i,] = unlist(str_split(string = day3[i], pattern = "\\."))
}
j = matrix(NA, nrow = 140, ncol = 140)
for(i in 1:length(day3)){
j[i,] = unlist(str_split(string = day3[i], pattern = "\\."))
}
reticulate::repl_python()
day3 = readLines("../data/day3.txt")
day3[1][1]
substr(day3[1], 1,1)
day3[1,]
0 %in% c(01234)
0 %in% c("01234")
0 %in% str_split("0123456789", "")
'0' %in% unlist(str_split("0123456789", ""))
'0' %in% c("012345")
for(r in 1:length(140)){
for(c in 1:length(140)){
if(!substr(day3[r], c,c) %in% c('0', '1','2',
'3','4','5','6',
'7', '8','9')){
chars[r, c] = substr(day3[r],c,c)
}
}
}
chars = matrix(NA, nrow = 140, ncol = 140)
for(r in 1:length(140)){
for(c in 1:length(140)){
if(!substr(day3[r], c,c) %in% c('0', '1','2',
'3','4','5','6',
'7', '8','9')){
chars[r, c] = substr(day3[r],c,c)
}
}
}
chars
for(r in 1:length(140)){
for(c in 1:length(140)){
if(!substr(day3[r], c,c) %in% c('0', '1','2',
'3','4','5','6',
'7', '8','9')){
chars[r, c] = substr(day3[r],c,c)
}
}
}
for(r in 1:length(140)){
for(c in 1:length(140)){
if(!substr(day3[r], c,c) %in% c('0', '1','2',
'3','4','5','6',
'7', '8','9')){
print(r,c)
chars[r, c] = substr(day3[r],c,c)
}
}
}
day32 = data.table::fread("../data/day3.txt", header = F)
day32
for(r in 1:length(140)){
for(c in 1:length(140)){
if(!substr(day32[r], c,c) %in% c('0', '1','2',
'3','4','5','6',
'7', '8','9')){
print(r,c)
chars[r, c] = substr(day32[r],c,c)
}
}
}
chars
chars = matrix("", nrow = 140, ncol = 140)
for(r in 1:length(140)){
for(c in 1:length(140)){
if(!substr(day32[r,], c,c) %in% c('0', '1','2',
'3','4','5','6',
'7', '8','9')){
print(r,c)
chars[r, c] = substr(day32[r,],c,c)
}
}
}
chars
View(chars)
for(r in 1:length(140)){
for(c in 1:length(140)){
if(!(substr(day32[r,], c,c) %in% c('0', '1','2',
'3','4','5','6',
'7', '8','9', '.'))){
print(r,c)
chars[r, c] = substr(day32[r,],c,c)
}
}
}
chars
View(chars)
for(r in 1:length(140)){
for(c in 1:length(140)){
if (!(substr(board[r,], c, c) %in% c('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.'))) {
chars[r, c] <- substr(board[r,], c, c)
}
}
}
for(r in 1:length(140)){
for(c in 1:length(140)){
if (!(substr(day3[r,], c, c) %in% c('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.'))) {
chars[r, c] <- substr(day3[r,], c, c)
}
}
}
for(r in 1:length(140)){
for(c in 1:length(140)){
if (!(substr(day3[r], c, c) %in% c('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.'))) {
chars[r, c] <- substr(day3[r], c, c)
}
}
}
chars
for(r in 1:length(140)){
for(c in 1:length(140)){
print(c)
if (!(substr(day3[r], c, c) %in% c('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.'))) {
chars[r, c] <- substr(day3[r], c, c)
}
}
}
for(r in 1:140)){
for(r in 1:140){
for(c in 1:140){
if (!(substr(day3[r], c, c) %in% c('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.'))) {
chars[r, c] <- substr(day3[r], c, c)
}
}
}
for(r in 1:nrow(chars)){
for(c in 1:ncol(chars)){
if(chars[r,c] != ""){
val = as.numeric(regmatches(chars[r,c], "\\d+", chars[r,c]))
values[[(r-1)*ncol(chars) + c]] = val
}
}
}
for(r in 1:nrow(chars)){
for(c in 1:ncol(chars)){
if(chars[r,c] != ""){
val = as.numeric(regmatches(chars[r,c], regexpr("\\d+", chars[r,c])))
values[[(r-1)*ncol(chars) + c]] = val
}
}
}
values = vector("list", length = nrow(chars)*ncol(chars))
for(r in 1:nrow(chars)){
for(c in 1:ncol(chars)){
if(chars[r,c] != ""){
val = as.numeric(regmatches(chars[r,c], regexpr("\\d+", chars[r,c])))
values[[(r-1)*ncol(chars) + c]] = val
}
}
}
values
result_df = data.frame(
position = rep(names(values), sapply(values, length))
value = unlist(values)
result_df = data.frame(
position = rep(names(values), sapply(values, length)),
value = unlist(values)
)
result_df
library(data.table)
# Read the board from the file
board <- fread("../data/day3.txt", header = FALSE)
# Create a matrix to store characters from the board
chars <- matrix("", nrow = 140, ncol = 140)
# Iterate through the rows of the board
for (r in 1:nrow(board)) {
# Iterate through the columns of each row
for (c in 1:ncol(board)) {
# Check if the character is not in '01234566789.'
if (!(substr(board[r,], c, c) %in% c('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.'))) {
chars[r, c] <- substr(board[r,], c, c)
}
}
}
# Initialize a list to store numeric values for each position
values <- vector("list", length = nrow(chars) * ncol(chars))
# Iterate through the rows of the matrix
for (r in 1:nrow(chars)) {
# Iterate through the columns of each row
for (c in 1:ncol(chars)) {
# Check if the character is not empty
if (chars[r, c] != "") {
# Extract numeric values using regular expression
numeric_values <- as.numeric(regmatches(chars[r, c], regexpr("\\d+", chars[r, c])))
# Store the values in the list
values[[(r - 1) * ncol(chars) + c]] <- numeric_values
}
}
}
# Create a data frame with positions and corresponding numeric values
result_df <- data.frame(
position = rep(names(values), sapply(values, length)),
value = unlist(values)
)
# Sum of all values
total_sum <- sum(result_df$value)
# Sum of products for values with length 2
sum_of_products <- sum(apply(result_df[result_df$value %in% which(sapply(values, length) == 2), ], 1, prod))
print(total_sum)
print(sum_of_products)
for(r in 1:nrow(chars)){
for(c in 1:ncol(chars)){
if(chars[r,c] != ""){
val = as.numeric(regmatches(day3[r,c], regexpr("\\d+", chars[r,c])))
values[[(r-1)*ncol(chars) + c]] = val
}
}
}
values
chars = matrix("", nrow = 140, ncol = 140)
for(r in 1:140){
for(c in 1:140){
chars[r, c] <- substr(day3[r], c, c)
}
}
View(chars)
library(tidyverse)
input = as_tibble(readLines("../data/day3.txt"))
View(input)
d = input |>
rowid_to_column() |>
separate_rows(value, sep = "", convert = T)
d
d = input |>
rowid_to_column() |>
separate_rows(value, sep = "", convert = T) |>
drop_na(value) |>
filter(value != "") |>
mutate(colid = row_number(), .by = "rowid")
d
d = input |>
rowid_to_column() |>
separate_rows(value, sep = "", convert = T) |>
drop_na(value) |>
filter(value != "") |>
mutate(colid = row_number(), .by = "rowid") |>
select(value, rowid, colid, key)
select(value, rowid, colid, key)
d = input |>
rowid_to_column() |>
separate_rows(value, sep = "", convert = T) |>
drop_na(value) |>
filter(value != "") |>
mutate(colid = row_number(), .by = "rowid") |>
mutate(key = paste(rowid, colid, sep=", ")) |>
select(value, rowid, colid, key)
d
